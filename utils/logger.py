"""
TRader Panel - Merkezi Logging Sistemi
TÃ¼m modÃ¼ller iÃ§in standardize edilmiÅŸ logging yapÄ±sÄ±
"""

import logging
import os
from datetime import datetime
from logging.handlers import RotatingFileHandler
from typing import Dict, Optional
from config import Config


class TRaderLogger:
    """Merkezi logging sÄ±nÄ±fÄ±"""
    
    _loggers: Dict[str, logging.Logger] = {}
    _configured = False
    
    @classmethod
    def setup_logging(cls):
        """Merkezi logging yapÄ±landÄ±rmasÄ±"""
        if cls._configured:
            return
            
        # Log dizinini oluÅŸtur
        if not os.path.exists(Config.LOG_DIR):
            os.makedirs(Config.LOG_DIR)
        
        # Root logger yapÄ±landÄ±rmasÄ±
        root_logger = logging.getLogger()
        root_logger.setLevel(Config.LOG_LEVEL)
        
        # Mevcut handler'larÄ± temizle
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # Console handler
        console_handler = logging.StreamHandler()
        console_handler.setLevel(Config.LOG_LEVEL)
        console_formatter = logging.Formatter(
            '%(asctime)s [%(levelname)s] [%(name)s] %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        console_handler.setFormatter(console_formatter)
        
        # File handler (rotating)
        file_handler = RotatingFileHandler(
            os.path.join(Config.LOG_DIR, 'trader_panel.log'),
            maxBytes=Config.LOG_FILE_MAX_SIZE,
            backupCount=Config.LOG_FILE_BACKUP_COUNT,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_formatter = logging.Formatter(
            Config.LOG_FORMAT,
            datefmt=Config.LOG_DATE_FORMAT
        )
        file_handler.setFormatter(file_formatter)
        
        # Handler'larÄ± ekle
        root_logger.addHandler(console_handler)
        root_logger.addHandler(file_handler)
        
        cls._configured = True
    
    @classmethod
    def get_logger(cls, name: str) -> logging.Logger:
        """ModÃ¼l iÃ§in logger al"""
        if not cls._configured:
            cls.setup_logging()
            
        if name not in cls._loggers:
            logger = logging.getLogger(name)
            cls._loggers[name] = logger
            
        return cls._loggers[name]
    
    @classmethod
    def get_module_logger(cls, module_file: str) -> logging.Logger:
        """Dosya yolundan modÃ¼l logger'Ä± al"""
        module_name = os.path.splitext(os.path.basename(module_file))[0]
        return cls.get_logger(module_name)


# Kolay kullanÄ±m iÃ§in yardÄ±mcÄ± fonksiyonlar
def get_logger(name: Optional[str] = None) -> logging.Logger:
    """Logger al - modÃ¼l adÄ± verilmezse Ã§aÄŸÄ±ran modÃ¼lÃ¼n adÄ±nÄ± kullan"""
    if name is None:
        import inspect
        frame = inspect.currentframe()
        if frame and frame.f_back:
            caller_frame = frame.f_back
            name = caller_frame.f_globals.get('__name__', 'unknown')
            if name == '__main__':
                filename = caller_frame.f_globals.get('__file__', 'main')
                if filename:
                    name = os.path.splitext(os.path.basename(filename))[0]
                else:
                    name = 'main'
        else:
            name = 'unknown'
    
    # Ensure name is never None
    if name is None:
        name = 'unknown'
    
    return TRaderLogger.get_logger(name)


def setup_module_logger(module_file: str) -> logging.Logger:
    """ModÃ¼l dosyasÄ± iÃ§in logger kurulumu"""
    return TRaderLogger.get_module_logger(module_file)


# Ã–zel log seviyeleri iÃ§in yardÄ±mcÄ± fonksiyonlar
def log_performance(logger: logging.Logger, message: str, duration: Optional[float] = None):
    """Performans loglarÄ± iÃ§in Ã¶zel format"""
    if duration is not None:
        logger.info(f"[PERF] {message}: {duration:.3f}s")
    else:
        logger.info(f"[PERF] {message}")


def log_signal(logger: logging.Logger, symbol: str, signal_type: str, details: str = ""):
    """Sinyal loglarÄ± iÃ§in Ã¶zel format"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    if details:
        logger.info(f"ðŸ“Š [{timestamp}] {symbol} | {signal_type} | {details}")
    else:
        logger.info(f"ðŸ“Š [{timestamp}] {symbol} | {signal_type}")


def log_error_with_context(logger: logging.Logger, error: Exception, context: str = ""):
    """Hata loglarÄ± iÃ§in Ã¶zel format"""
    import traceback
    if context:
        logger.error(f"[ERROR] {context}: {str(error)}")
    else:
        logger.error(f"[ERROR] {str(error)}")
    logger.debug(f"[ERROR_TRACE] {traceback.format_exc()}")


def log_automation(logger: logging.Logger, message: str, level: str = "info"):
    """Otomasyon loglarÄ± iÃ§in Ã¶zel format"""
    formatted_msg = f"[AUTO] {message}"
    if level == "info":
        logger.info(formatted_msg)
    elif level == "warning":
        logger.warning(formatted_msg)
    elif level == "error":
        logger.error(formatted_msg)
    elif level == "debug":
        logger.debug(formatted_msg)


def log_metrics(logger: logging.Logger, symbol: str, metrics: dict):
    """Metrik loglarÄ± iÃ§in Ã¶zel format"""
    metrics_str = ", ".join([f"{k}: {v}" for k, v in metrics.items()])
    logger.info(f"[METRICS] {symbol} - {metrics_str}")


# BaÅŸlangÄ±Ã§ta logging'i kur
TRaderLogger.setup_logging()
