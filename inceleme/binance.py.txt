import sqlite3
import os

# Veritabanı yolu
DB_PATH = 'my_signals.db'

def init_db():
    """Veritabanını ve gerekli tabloları oluşturur."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # signals tablosu (Strong sinyaller için)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS signals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT,
            timestamp INTEGER,
            timeframe TEXT,
            signal_type TEXT,
            buy_pct REAL,
            sell_pct REAL,
            price REAL,
            bars_since INTEGER,
            date_added TEXT,
            is_strong INTEGER
        )
    ''')
    
    # intersections tablosu (BINGO sinyaller için)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS intersections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT,
            timestamp INTEGER,
            intersection_type TEXT,
            highest_timeframe TEXT,
            price REAL,
            entry_price REAL,
            bars_since_4h INTEGER,
            bars_since_1h INTEGER,
            bars_since_15m INTEGER,
            date_added TEXT,
            is_strong INTEGER
        )
    ''')
    
    # ohlcv_data tablosu (fiyat verileri için)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ohlcv_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            symbol TEXT,
            timeframe TEXT,
            timestamp INTEGER,
            open REAL,
            high REAL,
            low REAL,
            close REAL,
            volume REAL
        )
    ''')
    
    conn.commit()
    conn.close()

# Uygulama başında veritabanını başlat
init_db()

from flask import Flask, render_template, request, jsonify, render_template_string
import requests
import math
import time
from datetime import datetime, timedelta
import numpy as np
import logging

# Flask uygulamasını başlat
app = Flask(__name__)

# Hata loglamayı ayarla
logging.basicConfig(level=logging.INFO)

# --- Yapılandırma ve Sabitler ---
BINANCE_API_ADRESI = 'https://api.binance.com/api/v3/klines'

# --- Yardımcı Fonksiyonlar ---
def gerekli_mum_sayisini_hesapla(zaman_araligi_gun, periyot):
    # Periyoda göre mum sayısını hesapla
    if periyot == '1m': 
        return min(1000, 24 * 60 * zaman_araligi_gun)  # Her gün için 24*60 mum (dakikalık)
    elif periyot == '5m': 
        return min(1000, 24 * 12 * zaman_araligi_gun)  # Her gün için 24*12 mum (5 dakikalık)
    elif periyot == '15m': 
        return min(1000, 24 * 4 * max(15, zaman_araligi_gun))  # En az 15 günlük 15 dakikalık mumlar
    elif periyot == '30m': 
        return min(1000, 24 * 2 * zaman_araligi_gun)  # Her gün için 24*2 mum (30 dakikalık)
    elif periyot == '1h': 
        return min(1000, 24 * max(20, zaman_araligi_gun))  # En az 20 günlük saatlik mumlar
    elif periyot == '4h': 
        return min(1000, 6 * max(30, zaman_araligi_gun))  # En az 30 günlük 4 saatlik mumlar
    else:
        return min(1000, 24 * 4 * zaman_araligi_gun)  # Varsayılan

def veri_cek(sembol, periyot, mum_limiti):
    parametreler = {'symbol': sembol, 'interval': periyot, 'limit': mum_limiti}
    try:
        yanit = requests.get(BINANCE_API_ADRESI, params=parametreler, timeout=10)
        yanit.raise_for_status()
        veri = yanit.json()
        if not veri: raise ValueError("API'den boş veri alındı.")

        zaman_damgalari = []
        acilis = []
        yuksek = []
        dusuk = []
        kapanis = []
        hacim = []
        
        # Veritabanı bağlantısını aç
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        for mum in veri:
            timestamp = mum[0]
            open_price = float(mum[1])
            high_price = float(mum[2])
            low_price = float(mum[3])
            close_price = float(mum[4])
            volume = float(mum[5])
            
            zaman_damgalari.append(timestamp)
            acilis.append(open_price)
            yuksek.append(high_price)
            dusuk.append(low_price)
            kapanis.append(close_price)
            hacim.append(volume)
            
            # OHLCV verisini veritabanına kaydet
            cursor.execute('''
                INSERT INTO ohlcv_data (symbol, timeframe, timestamp, open, high, low, close, volume)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (sembol, periyot, timestamp, open_price, high_price, low_price, close_price, volume))
        
        # Veritabanı değişikliklerini kaydet ve bağlantıyı kapat
        conn.commit()
        conn.close()

        return {
            "zaman_damgalari": zaman_damgalari,
            "acilis": np.array(acilis),
            "yuksek": np.array(yuksek),
            "dusuk": np.array(dusuk),
            "kapanis": np.array(kapanis),
            "hacim": np.array(hacim),
            "son_mum_zamani_ms": veri[-1][0] if veri else None
        }
    except requests.exceptions.Timeout:
        logging.error(f"API isteği zaman aşımına uğradı: {sembol}")
        raise ConnectionError("Binance API isteği zaman aşımına uğradı.")
    except requests.exceptions.RequestException as e:
        logging.error(f"API bağlantı hatası: {e}")
        raise ConnectionError(f"Binance API bağlantı hatası: {e}")
    except ValueError as e:
        logging.error(f"Veri işleme hatası: {e}")
        raise ValueError(f"Veri işleme hatası: {e}")
    except Exception as e:
        logging.exception("Beklenmedik hata oluştu:")
        raise RuntimeError(f"Beklenmedik bir sunucu hatası oluştu: {e}")

# --- Ana Hesaplama Fonksiyonları ---
def change_vp_hesapla(kapanis_fiyatlari, yuksek_fiyatlar, dusuk_fiyatlar, hacimler, tw_modu_aktif):
    veri_uzunlugu = len(kapanis_fiyatlari)
    if veri_uzunlugu < 2: return None

    onem_esigi = 0.4
    hacim_onem_esigi = 1.8
    kumulatif_pozitif = 0.0
    kumulatif_negatif = 0.0
    kumulatif_alim = 0.0
    kumulatif_satim = 0.0
    ortalama_hacim = np.mean(hacimler) if hacimler.size > 0 else 0

    pozitif_yuzde = np.full(veri_uzunlugu, 50.0)
    negatif_yuzde = np.full(veri_uzunlugu, 50.0)
    alim_yuzde = np.full(veri_uzunlugu, 50.0)
    satim_yuzde = np.full(veri_uzunlugu, 50.0)

    for i in range(1, veri_uzunlugu):
        fiyat_degisimi = kapanis_fiyatlari[i] - kapanis_fiyatlari[i-1]
        if fiyat_degisimi > 0: kumulatif_pozitif += fiyat_degisimi
        elif fiyat_degisimi < 0: kumulatif_negatif += abs(fiyat_degisimi)

        fiyat_araligi = yuksek_fiyatlar[i] - dusuk_fiyatlar[i]
        if fiyat_araligi == 0: fiyat_araligi = 0.000001

        alim_hacmi = ((kapanis_fiyatlari[i] - dusuk_fiyatlar[i]) / fiyat_araligi) * hacimler[i]
        satim_hacmi = ((yuksek_fiyatlar[i] - kapanis_fiyatlari[i]) / fiyat_araligi) * hacimler[i]
        kumulatif_alim += alim_hacmi
        kumulatif_satim += satim_hacmi

        toplam_hareket = kumulatif_pozitif + kumulatif_negatif
        if toplam_hareket == 0: toplam_hareket = 0.000001
        toplam_hacim = kumulatif_alim + kumulatif_satim
        if toplam_hacim == 0: toplam_hacim = 0.000001

        pozitif_yuzde[i] = (kumulatif_pozitif / toplam_hareket) * 100
        negatif_yuzde[i] = (kumulatif_negatif / toplam_hareket) * 100
        alim_yuzde[i] = (kumulatif_alim / toplam_hacim) * 100
        satim_yuzde[i] = (kumulatif_satim / toplam_hacim) * 100

    if tw_modu_aktif:
        onemli_olaylar = []
        if veri_uzunlugu > 5:
            for i in range(5, veri_uzunlugu):
                onceki_kapanis = kapanis_fiyatlari[i-5]
                if onceki_kapanis == 0: onceki_kapanis = 0.000001
                son_fiyat_degisimi = abs(kapanis_fiyatlari[i] - onceki_kapanis) / onceki_kapanis
                hacim_orani = hacimler[i] / ortalama_hacim if ortalama_hacim > 0 else 1.0

                if (son_fiyat_degisimi > onem_esigi and hacim_orani > 1.5) or \
                   (hacim_orani > hacim_onem_esigi):
                    yon = 'alim' if kapanis_fiyatlari[i] > kapanis_fiyatlari[i-5] else 'satim'
                    buyukluk = min(3.0, 1.0 + son_fiyat_degisimi * 2 + min(1.0, hacim_orani / 5))
                    onemli_olaylar.append({'index': i, 'yon': yon, 'buyukluk': buyukluk})

        for olay in onemli_olaylar:
            etki_alani = min(20, max(10, math.floor(olay['buyukluk'] * 10)))
            baslangic_indeksi = max(0, olay['index'] - etki_alani)
            bitis_indeksi = min(veri_uzunlugu - 1, olay['index'] + etki_alani)
            for j in range(baslangic_indeksi, bitis_indeksi + 1):
                mesafe = abs(j - olay['index']) / etki_alani if etki_alani > 0 else 0
                etki = (1 - mesafe) * olay['buyukluk']
                if olay['yon'] == 'alim':
                    alim_yuzde[j] += etki * 10
                    pozitif_yuzde[j] += etki * 10
                    satim_yuzde[j] = max(0, satim_yuzde[j] - etki * 5)
                    negatif_yuzde[j] = max(0, negatif_yuzde[j] - etki * 5)
                else:
                    satim_yuzde[j] += etki * 10
                    negatif_yuzde[j] += etki * 10
                    alim_yuzde[j] = max(0, alim_yuzde[j] - etki * 5)
                    pozitif_yuzde[j] = max(0, pozitif_yuzde[j] - etki * 5)

        pozitif_yuzde = np.clip(pozitif_yuzde, 0, 100)
        negatif_yuzde = np.clip(negatif_yuzde, 0, 100)
        alim_yuzde = np.clip(alim_yuzde, 0, 100)
        satim_yuzde = np.clip(satim_yuzde, 0, 100)
        pozitif_yuzde, negatif_yuzde, alim_yuzde, satim_yuzde = \
            tradingview_tarzi_yumusatma(pozitif_yuzde, negatif_yuzde, alim_yuzde, satim_yuzde)

    # NumPy dizilerini Python listelerine çevirerek JSON uyumlu hale getir
    return {
        "pozitif_yuzde": pozitif_yuzde.tolist(),
        "negatif_yuzde": negatif_yuzde.tolist(),
        "alim_yuzde": alim_yuzde.tolist(),
        "satim_yuzde": satim_yuzde.tolist()
    }

def tradingview_tarzi_yumusatma(pozitif_yuzde, negatif_yuzde, alim_yuzde, satim_yuzde):
    veri_uzunlugu = len(pozitif_yuzde)
    if veri_uzunlugu < 6: return pozitif_yuzde, negatif_yuzde, alim_yuzde, satim_yuzde

    taban_cizgi = 50.0
    cekme_faktoru = 0.7
    yumusatilmis_pozitif = np.copy(pozitif_yuzde)
    yumusatilmis_negatif = np.copy(negatif_yuzde)
    yumusatilmis_alim = np.copy(alim_yuzde)
    yumusatilmis_satim = np.copy(satim_yuzde)
    yuksek_hassasiyet_araliklari = []

    for i in range(5, veri_uzunlugu):
        onemli_degisim_var = (abs(alim_yuzde[i] - alim_yuzde[i-5]) > 10 or
                               abs(satim_yuzde[i] - satim_yuzde[i-5]) > 10)
        if onemli_degisim_var:
            yeni_baslangic = max(0, i - 5)
            yeni_bitis = min(veri_uzunlugu - 1, i + 10)
            if yuksek_hassasiyet_araliklari and \
               yeni_baslangic - yuksek_hassasiyet_araliklari[-1]['bitis'] < 10:
                yuksek_hassasiyet_araliklari[-1]['bitis'] = max(yuksek_hassasiyet_araliklari[-1]['bitis'], yeni_bitis)
            else:
                yuksek_hassasiyet_araliklari.append({'baslangic': yeni_baslangic, 'bitis': yeni_bitis})

    for i in range(1, veri_uzunlugu):
        yuksek_hassasiyet_icinde = False
        for aralik in yuksek_hassasiyet_araliklari:
            if aralik['baslangic'] <= i <= aralik['bitis']:
                yuksek_hassasiyet_icinde = True
                break
        if not yuksek_hassasiyet_icinde:
            yumusatilmis_pozitif[i] = taban_cizgi + (pozitif_yuzde[i] - taban_cizgi) * (1 - cekme_faktoru)
            yumusatilmis_negatif[i] = taban_cizgi + (negatif_yuzde[i] - taban_cizgi) * (1 - cekme_faktoru)
            yumusatilmis_alim[i] = taban_cizgi + (alim_yuzde[i] - taban_cizgi) * (1 - cekme_faktoru)
            yumusatilmis_satim[i] = taban_cizgi + (satim_yuzde[i] - taban_cizgi) * (1 - cekme_faktoru)

    return yumusatilmis_pozitif, yumusatilmis_negatif, yumusatilmis_alim, yumusatilmis_satim

def nabizlari_tespit_et(zaman_damgalari_ms, dusuk_fiyatlar, yuksek_fiyatlar, alim_yuzde, satim_yuzde):
    """Artık sadece alım/satım yüzdelerinin kesişim noktalarında sinyal oluşturur"""
    nabizlar = []
    veri_uzunlugu = len(alim_yuzde)
    if veri_uzunlugu < 2:
        return nabizlar

    # Kesiştikleri noktaları tespit et
    for i in range(1, veri_uzunlugu):
        # Alım ve satım çizgilerinin kesişimi
        if (alim_yuzde[i] > satim_yuzde[i] and alim_yuzde[i-1] <= satim_yuzde[i-1]):
            # Alım sinyali (Yeşilden kırmızıya geçiş)
            nabizlar.append({
                'zaman': zaman_damgalari_ms[i],
                'deger': dusuk_fiyatlar[i] * 0.998,
                'tip': 'alim'
            })
        elif (satim_yuzde[i] > alim_yuzde[i] and satim_yuzde[i-1] <= alim_yuzde[i-1]):
            # Satım sinyali (Kırmızıdan yeşile geçiş)
            nabizlar.append({
                'zaman': zaman_damgalari_ms[i],
                'deger': yuksek_fiyatlar[i] * 1.002,
                'tip': 'satim'
            })
            
        # Önemli seviye geçişleri için ek sinyaller
        # 70 seviyesi üstüne çıkma - güçlü sinyal
        if (alim_yuzde[i] > 70 and alim_yuzde[i-1] <= 70 and alim_yuzde[i] > satim_yuzde[i]):
            nabizlar.append({
                'zaman': zaman_damgalari_ms[i],
                'deger': dusuk_fiyatlar[i] * 0.996,
                'tip': 'alim_guclu'
            })
        elif (satim_yuzde[i] > 70 and satim_yuzde[i-1] <= 70 and satim_yuzde[i] > alim_yuzde[i]):
            nabizlar.append({
                'zaman': zaman_damgalari_ms[i],
                'deger': yuksek_fiyatlar[i] * 1.004,
                'tip': 'satim_guclu'
            })
            
    return nabizlar

# --- Flask Routes ---
@app.route('/api/chart-data')
def chart_data_redirect():
    return get_data()


@app.route('/')
def index():
    """Ana HTML sayfasını sunar."""
    return render_template_string(HTML_TEMPLATE)

@app.route('/data')
def get_data():
    try:
        sembol = request.args.get('symbol', 'REZUSDT').upper()
        periyot = request.args.get('timeframe', '1m')
        zaman_araligi_gun = int(request.args.get('timeRange', 3))
        tw_modu_str = request.args.get('twMode', 'true').lower()
        tw_modu = tw_modu_str == 'true'

        app.logger.info(f"API isteği alındı: {sembol} {periyot} {zaman_araligi_gun} {tw_modu}")

        mum_limiti = gerekli_mum_sayisini_hesapla(zaman_araligi_gun, periyot)
        cekilen_veri = veri_cek(sembol, periyot, mum_limiti)

        hesaplama_sonucu = change_vp_hesapla(
            cekilen_veri['kapanis'],
            cekilen_veri['yuksek'],
            cekilen_veri['dusuk'],
            cekilen_veri['hacim'],
            tw_modu
        )
        if not hesaplama_sonucu:
            raise ValueError("Change %VP hesaplaması yapılamadı.")

        nabizlar = nabizlari_tespit_et(
            cekilen_veri['zaman_damgalari'],
            cekilen_veri['dusuk'],
            cekilen_veri['yuksek'],
            hesaplama_sonucu['alim_yuzde'],
            hesaplama_sonucu['satim_yuzde']
        )

        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            for nabiz in nabizlar:
                i = cekilen_veri['zaman_damgalari'].index(nabiz['zaman'])

                signal_data = {
                    "buy_signal": nabiz['tip'] in ['alim', 'alim_guclu'],
                    "sell_signal": nabiz['tip'] in ['satim', 'satim_guclu'],
                    "buy_pct": hesaplama_sonucu['alim_yuzde'][i] if nabiz['tip'] in ['alim', 'alim_guclu'] else 0,
                    "sell_pct": hesaplama_sonucu['satim_yuzde'][i] if nabiz['tip'] in ['satim', 'satim_guclu'] else 0,
                    "last_price": nabiz['deger'],
                    "last_timestamp": nabiz['zaman'],
                }

                if signal_data['buy_signal'] or signal_data['sell_signal']:
                    signal_type = 'buy' if signal_data['buy_signal'] else 'sell'
                    cursor.execute('''
                        INSERT INTO signals (symbol, timestamp, timeframe, signal_type, buy_pct, sell_pct, price, bars_since, date_added, is_strong)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        sembol,
                        int(signal_data['last_timestamp']),
                        periyot,
                        signal_type,
                        signal_data['buy_pct'],
                        signal_data['sell_pct'],
                        signal_data['last_price'],
                        0,
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        nabiz['tip'] in ['alim_guclu', 'satim_guclu']
                    ))

        # İŞTE burada direk return yapıyoruz
        return jsonify({
            "success": True,
            "timestamps": cekilen_veri['zaman_damgalari'],
            "opens": cekilen_veri['acilis'].tolist(),
            "highs": cekilen_veri['yuksek'].tolist(),
            "lows": cekilen_veri['dusuk'].tolist(),
            "closes": cekilen_veri['kapanis'].tolist(),
            "volumes": cekilen_veri['hacim'].tolist(),
            "positivePct": hesaplama_sonucu['pozitif_yuzde'],
            "negativePct": hesaplama_sonucu['negatif_yuzde'],
            "buyPct": hesaplama_sonucu['alim_yuzde'],
            "sellPct": hesaplama_sonucu['satim_yuzde'],
            "pulses": nabizlar,
            "lastCandleTimeMs": cekilen_veri['son_mum_zamani_ms'],
            "requestParams": {
                "symbol": sembol,
                "timeframe": periyot,
                "timeRange": zaman_araligi_gun,
                "twMode": tw_modu
            }
        })

    except Exception as e:
        app.logger.error(f"Hata oluştu: {str(e)}")
        return jsonify({"success": False, "error": str(e)}), 500



# --- HTML, CSS ve JavaScript içeriği burada bir template string olarak tanımlanıyor ---
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TradingView Style Change %VP</title>
    
    <!-- Lightweight Charts kütüphanesi -->
    <script src="https://cdn.jsdelivr.net/npm/lightweight-charts@3.8.0/dist/lightweight-charts.standalone.production.min.js"></script>
    
    <!-- Moment.js (Tarih/Zaman formatlama için) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/tr.min.js"></script> <!-- Türkçe için -->
    
    <style>
        /* CSS Stiller */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #15171a;
            color: #e0e0e0;
        }
        .container {
            width: 98%;
            margin: 0 auto;
            padding: 10px;
        }
        .chart-container {
            background-color: #1d2126;
            border-radius: 5px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.3);
            padding: 10px;
            margin-bottom: 15px;
            position: relative;
        }
        .chart-panels {
            display: flex;
            flex-direction: column;
            height: 600px;
            border-radius: 4px;
            overflow: hidden;
        }
        #price-chart {
            flex: 3;
            position: relative;
        }
        #indicator-chart {
            flex: 1;
            position: relative;
            border-top: 1px solid #333;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            flex-wrap: wrap;
            padding: 0 10px;
        }
        .header h1 {
            margin: 0 0 10px 0;
            color: #e0e0e0;
            font-size: 20px;
            flex-basis: 100%;
            text-align: center;
        }
        .controls {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
            justify-content: center;
            width: 100%;
        }
        input, select, button {
            padding: 8px 12px;
            border: 1px solid #333;
            border-radius: 4px;
            font-size: 13px;
            background-color: #2a2e33;
            color: #e0e0e0;
        }
        button {
            background-color: #2962ff;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #0039cb;
        }
        .status {
            margin-top: 15px;
            padding: 10px;
            background-color: #2a2e33;
            border-radius: 4px;
            color: #e0e0e0;
            font-size: 13px;
        }
        .status p {
            margin: 5px 0;
            display: flex;
            align-items: center;
            word-break: break-word;
        }
        .loader {
            border: 4px solid #2a2e33;
            border-radius: 50%;
            border-top: 4px solid #2962ff;
            width: 16px;
            height: 16px;
            -webkit-animation: spin 1.5s linear infinite;
            animation: spin 1.5s linear infinite;
            display: inline-block;
            margin-right: 8px;
        }
        @-webkit-keyframes spin {
            0% { -webkit-transform: rotate(0deg); }
            100% { -webkit-transform: rotate(360deg); }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 26px;
            vertical-align: middle;
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #444;
            transition: .4s;
            border-radius: 26px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #2962ff;
        }
        input:checked + .slider:before {
            transform: translateX(24px);
        }
        .switch-label {
            margin-left: 8px;
            vertical-align: middle;
        }
        .time-label {
            margin-right: 5px;
            vertical-align: middle;
        }
        
        /* Chart Loading Overlay */
        .chart-container.loading::after {
            content: 'Yükleniyor...';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(29, 33, 38, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5em;
            color: #e0e0e0;
            z-index: 10;
        }
        
        /* TradingView Tarzı İyileştirmeler */
                    .indicator-info {
            background-color: rgba(30, 34, 39, 0.8);
            border: 1px solid #2e3740;
            border-radius: 4px;
            padding: 5px 8px;
            position: absolute;
            z-index: 3;
            pointer-events: none;
            font-size: 11px;
            line-height: 1.4;
            max-width: 180px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }
        
        .indicator-values {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(30, 34, 39, 0.8);
            border: 1px solid #2e3740;
            border-radius: 4px;
            padding: 5px 8px;
            z-index: 4;
            font-size: 11px;
            line-height: 1.5;
            color: #d1d4dc;
        }
        
        .indicator-values .time {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .indicator-values .value-row {
            display: flex;
            justify-content: space-between;
        }
        
        .indicator-values .label {
            color: #999;
            margin-right: 10px;
        }
        
        .buy-value {
            color: #26a69a;
        }
        
        .sell-value {
            color: #ef5350;
        }
        
        .positive-value {
            color: #2962ff;
        }
        
        .negative-value {
            color: #9c27b0;
        }
        
        .chart-marker-label {
            font-size: 10px;
            font-weight: bold;
            padding: 1px 3px;
            border-radius: 2px;
            white-space: nowrap;
        }
        
        .chart-marker-label.buy {
            background-color: rgba(38, 166, 154, 0.3);
            color: #26a69a;
            border: 1px solid rgba(38, 166, 154, 0.5);
        }
        
        .chart-marker-label.sell {
            background-color: rgba(239, 83, 80, 0.3);
            color: #ef5350;
            border: 1px solid rgba(239, 83, 80, 0.5);
        }
        
        /* Mobil Uyumluluk */
        @media (max-width: 768px) {
            .chart-panels {
                height: 500px;
            }
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            .toggle-switch {
                margin: 10px 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>TradingView Style Change %VP - Gerçek Zamanlı</h1>
            <div class="controls">
                <input id="symbol" type="text" placeholder="Symbol (e.g. BTC)" value="BTC">
                <button id="changeSymbol">Sembol Değiştir</button>
                <span class="time-label">Periyot:</span>
                <select id="timeframe">
                    <option value="1m">1 dakika</option>
                    <option value="5m">5 dakika</option>
                    <option value="15m">15 dakika</option>
                    <option value="30m">30 dakika</option>
                    <option value="1h" selected>1 saat</option>
                    <option value="4h">4 saat</option>
                </select>
                <span class="time-label">Süre:</span>
                <select id="timeRange">
                    <option value="1">1 Gün</option>
                    <option value="3">3 Gün</option>
                    <option value="7" selected>7 Gün</option>
                    <option value="15">15 Gün</option>
                    <option value="30">30 Gün</option>
                </select>
                <select id="interval">
                    <option value="15">15 saniye</option>
                    <option value="30" selected>30 saniye</option>
                    <option value="60">1 dakika</option>
                </select>
                <label class="toggle-switch">
                    <input type="checkbox" id="tw-mode" checked>
                    <span class="slider"></span>
                </label>
                <span class="switch-label">TW Modu</span>
            </div>
        </div>

        <div class="chart-container">
            <div class="chart-panels">
                <div id="price-chart"></div>
                <div id="indicator-chart"></div>
            </div>
        </div>

        <div class="status">
            <p><span id="loader" class="loader" style="display: none;"></span> Durum: <span id="status">Başlatılıyor...</span></p>
            <p>Son Güncelleme: <span id="lastUpdate">-</span></p>
            <p>Son Mum: <span id="lastCandle">-</span></p>
            <p>Veri Farkı: <span id="timeDiff" style="font-weight: bold;">-</span></p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Global Değişkenler ve UI Referansları ---
            const apiUrl = '/api/chart-data';
            const symbolInput = document.getElementById('symbol');
            const changeSymbolButton = document.getElementById('changeSymbol');
            const timeframeSelect = document.getElementById('timeframe');
            const timeRangeSelect = document.getElementById('timeRange');
            const twModeCheckbox = document.getElementById('tw-mode');
            const intervalSelect = document.getElementById('interval');

            const statusElement = document.getElementById('status');
            const lastUpdateElement = document.getElementById('lastUpdate');
            const lastCandleElement = document.getElementById('lastCandle');
            const timeDiffElement = document.getElementById('timeDiff');
            const loaderElement = document.getElementById('loader');
            const chartContainer = document.querySelector('.chart-container');

            let currentSymbol = symbolInput.value.toUpperCase();
            let currentTimeframe = timeframeSelect.value;
            let currentTimeRange = parseInt(timeRangeSelect.value);
            let currentTwMode = twModeCheckbox.checked;
            let isUpdating = false;
            let updateTimer = null;
            let currentChartData = null;
            
            // Grafiklerimizi tutacak değişkenler
                let priceChart = null;
            let indicatorChart = null;
            let candleSeries = null;
            let volumeSeries = null;
            let buyVpSeries = null;
            let sellVpSeries = null;
            let positiveVpSeries = null;
            let negativeVpSeries = null;

            // Sol bilgi panelini güncelleme fonksiyonu
            function updateIndicatorValues() {
                try {
                    if (currentChartData && currentChartData.buyPct && currentChartData.buyPct.length > 0) {
                        const lastIndex = currentChartData.buyPct.length - 1;
                        const buyValue = currentChartData.buyPct[lastIndex];
                        const sellValue = currentChartData.sellPct[lastIndex];
                        const positiveValue = currentChartData.positivePct[lastIndex];
                        const negativeValue = currentChartData.negativePct[lastIndex];
                        const lastTime = new Date(currentChartData.timestamps[lastIndex]);
                        
                        const dateStr = moment(lastTime).format('DD.MM.YYYY HH:mm');
                        
                        const indicatorValuesDiv = document.querySelector('.indicator-values');
                        if (indicatorValuesDiv) {
                            indicatorValuesDiv.querySelector('.time').textContent = `Zaman: ${dateStr}`;
                            indicatorValuesDiv.querySelector('.buy-value').textContent = buyValue.toFixed(1);
                            indicatorValuesDiv.querySelector('.sell-value').textContent = sellValue.toFixed(1);
                            indicatorValuesDiv.querySelector('.positive-value').textContent = positiveValue.toFixed(1);
                            indicatorValuesDiv.querySelector('.negative-value').textContent = negativeValue.toFixed(1);
                            
                            // Durum mesajını belirle
                            let statusText = 'Nötr';
                            let statusClass = '';
                            
                            if (buyValue > sellValue && buyValue > 70) {
                                statusText = 'Alım Eğilimi';
                                statusClass = 'buy-value';
                            } else if (sellValue > buyValue && sellValue > 70) {
                                statusText = 'Satım Eğilimi';
                                statusClass = 'sell-value';
                            }
                            
                            const statusElement = indicatorValuesDiv.querySelector('#indicator-durum .status-value');
                            statusElement.textContent = statusText;
                            statusElement.className = 'status-value ' + statusClass;
                        }
                    }
                } catch (error) {
                    console.error("Bilgi paneli güncelleme hatası:", error);
                }
            }

            moment.locale('tr');

            // --- Yardımcı Fonksiyonlar ---
            function updateStatus(message, isLoading = false, isError = false) {
                statusElement.textContent = message;
                statusElement.style.color = isError ? '#ef5350' : '#e0e0e0';
                lastUpdateElement.textContent = moment().format('LTS');
                if (isLoading) {
                    loaderElement.style.display = 'inline-block';
                    chartContainer.classList.add('loading');
                } else {
                    loaderElement.style.display = 'none';
                    chartContainer.classList.remove('loading');
                }
            }

            function scheduleNextUpdate() {
                clearTimeout(updateTimer);
                const intervalSeconds = parseInt(intervalSelect.value);
                if (!isUpdating && intervalSeconds > 0) {
                     console.log(`${intervalSeconds} saniye sonra güncelleme planlanıyor.`);
                     updateTimer = setTimeout(fetchData, intervalSeconds * 1000);
                } else {
                     console.log("Bir güncelleme zaten devam ediyor veya otomatik güncelleme kapalı, yenisi planlanmadı.");
                }
            }

            // --- Ana Veri Çekme ve Grafik Güncelleme Fonksiyonu ---
            async function fetchData() {
                if (isUpdating) {
                     console.log("Zaten bir güncelleme devam ediyor, atlanıyor.");
                     return;
                }
                isUpdating = true;
                clearTimeout(updateTimer);
                updateStatus('Veriler yükleniyor...', true);

                const symbol = symbolInput.value.toUpperCase();
                const timeframe = timeframeSelect.value;
                const timeRange = parseInt(timeRangeSelect.value);
                const twMode = twModeCheckbox.checked;
                const params = new URLSearchParams({
                    symbol: symbol + 'USDT',
                    timeframe: timeframe,
                    timeRange: timeRange,
                    twMode: twMode
                });

                try {
                    const response = await fetch(`${apiUrl}?${params.toString()}`);
                    const data = await response.json();

                    if (!response.ok || !data.success) {
                        throw new Error(data.error || `Sunucu hatası: ${response.status}`);
                    }

                    currentChartData = data;
                    createOrUpdateCharts(data);
                    
                    // Sol bilgi kutusunu güncelle - updateIndicatorValues'ı burada çağır
                    if (typeof updateIndicatorValues === 'function') {
                        try {
                            updateIndicatorValues();
                        } catch (err) {
                            console.error("Bilgi kutusunu güncellerken hata:", err);
                            updateStatus(`Bilgi kutusu güncellenemedi: ${err.message}`, false, true);
                        }
                    } else {
                        updateStatus("UpdateIndicatorValues fonksiyonu tanımlı değil", false, true);
                    }

                    const req = data.requestParams;
                    const lastCandleTime = moment(data.lastCandleTimeMs);
                    const now = moment();
                    const diffMinutes = now.diff(lastCandleTime, 'minutes');

                    lastCandleElement.textContent = lastCandleTime.format('LTS');
                    timeDiffElement.textContent = `${diffMinutes} dakika önce`;

                    if (diffMinutes > 5) {
                        timeDiffElement.style.color = '#ef5350';
                        updateStatus(`UYARI: Veriler güncel değil! (${req.symbol})`, false, true);
                    } else {
                        timeDiffElement.style.color = '#4CAF50';
                        updateStatus(`${req.timeRange} günlük ${req.symbol} verileri başarıyla güncellendi`, false);
                    }
                    document.title = `${req.symbol} - Change %VP (${req.timeRange} Gün, ${req.timeframe})`;

                } catch (error) {
                    console.error('Veri çekme veya işleme hatası:', error);
                    updateStatus(`Hata: ${error.message}`, false, true);
                } finally {
                    isUpdating = false;
                    scheduleNextUpdate();
                }
            }

            // --- Grafik Çizim Fonksiyonları ---
            function createOrUpdateCharts(data) {
                if (!data || !data.timestamps || data.timestamps.length === 0) {
                    console.warn("Grafik çizimi için yetersiz veri.");
                    updateStatus("Grafik çizmek için yeterli veri bulunamadı.", false, true);
                    return;
                }
                
                // İlk kez mi oluşturuluyor yoksa güncelleme mi?
                const isFirstRender = !priceChart;
                
                // Eğer ilk kez oluşturuluyorsa
                if (isFirstRender) {
                    initializeCharts();
                }
                
                // Verileri Lightweight Charts için hazırla
                try {
                    prepareAndUpdateChartData(data);
                    
                    // Bilgi panelini güncelleyelim
                    if (typeof updateIndicatorValues === 'function') {
                        updateIndicatorValues();
                    }
                } catch (error) {
                    console.error("Grafik güncellenirken hata:", error);
                    updateStatus(`Grafik güncellenemedi: ${error.message}`, false, true);
                }
            }
            
            // Grafikleri oluştur
            function initializeCharts() {
                const priceChartElement = document.getElementById('price-chart');
                const indicatorChartElement = document.getElementById('indicator-chart');
                
                // Fiyat grafiği
                priceChart = LightweightCharts.createChart(priceChartElement, {
                    layout: {
                        background: { color: '#1e2227' },
                        textColor: '#d1d4dc',
                    },
                    grid: {
                        vertLines: { color: '#2e3740' },
                        horzLines: { color: '#2e3740' },
                    },
                    crosshair: {
                        mode: LightweightCharts.CrosshairMode.Normal,
                        vertLine: {
                            color: '#4e5b85',
                            width: 1,
                            style: 1, // Kesikli çizgi
                            visible: true,
                            labelVisible: true,
                        },
                        horzLine: {
                            color: '#4e5b85',
                            width: 1,
                            style: 1, // Kesikli çizgi
                            visible: true,
                            labelVisible: true,
                        },
                    },
                    rightPriceScale: {
                        borderColor: '#2e3740',
                        visible: true,
                        borderVisible: true,
                        scaleMargins: {
                            top: 0.1,
                            bottom: 0.2,
                        },
                    },
                    timeScale: {
                        borderColor: '#2e3740',
                        visible: true,
                        borderVisible: true,
                        timeVisible: true,
                        secondsVisible: false,
                        tickMarkFormatter: (time, tickMarkType, locale) => {
                            const date = new Date(time * 1000);
                            const hours = date.getHours().toString().padStart(2, '0');
                            const minutes = date.getMinutes().toString().padStart(2, '0');
                            const day = date.getDate().toString().padStart(2, '0');
                            const month = (date.getMonth() + 1).toString().padStart(2, '0');
                            
                            // TradingView tarzı formatlama
                            if (tickMarkType === 2) { // Daha büyük tick
                                return `${day}.${month} ${hours}:${minutes}`;
                            } else if (tickMarkType === 1) { // Orta tick
                                return minutes === '00' ? hours : `${hours}:${minutes}`;
                            } else {  // Küçük tick
                                return minutes === '00' ? hours : (minutes === '30' ? '30' : '');
                            }
                        },
                    },
                    watermark: {
                        visible: true,
                        fontSize: 24,
                        horzAlign: 'center',
                        vertAlign: 'center',
                        color: 'rgba(41, 98, 255, 0.1)',
                        text: symbolInput.value.toUpperCase() + 'USDT',
                    },
                });
                
                // Mum çubukları ekle
                candleSeries = priceChart.addCandlestickSeries({
                    upColor: '#26a69a',
                    downColor: '#ef5350',
                    borderDownColor: '#ef5350',
                    borderUpColor: '#26a69a',
                    wickDownColor: '#ef5350',
                    wickUpColor: '#26a69a',
                });
                
                // Hacim grafiği ekle
                volumeSeries = priceChart.addHistogramSeries({
                    color: '#26a69a',
                    priceFormat: {
                        type: 'volume',
                    },
                    priceScaleId: '',
                    scaleMargins: {
                        top: 0.85,
                        bottom: 0,
                    },
                });
                
                // TradingView tarzı bilgi kutusu ekle
                const priceInfoContainer = document.createElement('div');
                priceInfoContainer.style.position = 'absolute';
                priceInfoContainer.style.zIndex = '2';
                priceInfoContainer.style.top = '10px';
                priceInfoContainer.style.left = '10px';
                priceInfoContainer.style.padding = '5px';
                priceInfoContainer.style.fontSize = '12px';
                priceInfoContainer.style.background = 'rgba(30, 34, 39, 0.7)';
                priceInfoContainer.style.color = '#d1d4dc';
                priceInfoContainer.style.borderRadius = '3px';
                priceInfoContainer.style.display = 'none';
                priceChartElement.appendChild(priceInfoContainer);
                
                // İndikatör grafiği
                indicatorChart = LightweightCharts.createChart(indicatorChartElement, {
                    layout: {
                        background: { color: '#1e2227' },
                        textColor: '#d1d4dc',
                    },
                    grid: {
                        vertLines: { color: '#2e3740' },
                        horzLines: { color: '#2e3740' },
                    },
                    crosshair: {
                        mode: LightweightCharts.CrosshairMode.Normal,
                        vertLine: {
                            color: '#4e5b85',
                            width: 1,
                            style: 1, // Kesikli çizgi
                            visible: true,
                            labelVisible: true,
                        },
                        horzLine: {
                            color: '#4e5b85',
                            width: 1,
                            style: 1, // Kesikli çizgi
                            visible: true,
                            labelVisible: true,
                        },
                    },
                    rightPriceScale: {
                        borderColor: '#2e3740',
                        visible: true,
                        borderVisible: true,
                    },
                    timeScale: {
                        borderColor: '#2e3740',
                        visible: true,
                        borderVisible: true,
                        timeVisible: true,  // Osilatörde tarihi göster
                        secondsVisible: false,
                    },
                });
                
                // Osilatör için sol bilgi paneli oluştur
                const indicatorValuesDiv = document.createElement('div');
                indicatorValuesDiv.className = 'indicator-values';
                indicatorValuesDiv.innerHTML = `
                    <div class="time">Zaman: --</div>
                    <div class="value-row">
                        <span class="label">Buy %VP:</span>
                        <span class="buy-value">--</span>
                    </div>
                    <div class="value-row">
                        <span class="label">Sell %VP:</span>
                        <span class="sell-value">--</span>
                    </div>
                    <div class="value-row">
                        <span class="label">Positive %VP:</span>
                        <span class="positive-value">--</span>
                    </div>
                    <div class="value-row">
                        <span class="label">Negative %VP:</span>
                        <span class="negative-value">--</span>
                    </div>
                    <div class="value-row" id="indicator-durum">
                        <span class="label">Durum:</span>
                        <span class="status-value">--</span>
                    </div>
                `;
                indicatorChartElement.appendChild(indicatorValuesDiv);
                
                // Buy %VP çizgisi ekle
                buyVpSeries = indicatorChart.addLineSeries({
                    color: '#26a69a', // Yeşil
                    lineWidth: 2,
                    title: '', // Başlığı kaldır, sol bilgi kutusunda gösterilecek
                    priceScaleId: 'right',
                });
                
                // Sell %VP çizgisi ekle
                sellVpSeries = indicatorChart.addLineSeries({
                    color: '#ef5350', // Kırmızı
                    lineWidth: 2,
                    title: '', // Başlığı kaldır, sol bilgi kutusunda gösterilecek
                    priceScaleId: 'right',
                });
                
                // Positive %VP çizgisi ekle
                positiveVpSeries = indicatorChart.addLineSeries({
                    color: '#2962ff', // Mavi
                    lineWidth: 1,
                    lineStyle: 1, // Kesikli çizgi
                    title: '', // Başlığı kaldır, sol bilgi kutusunda gösterilecek
                    priceScaleId: 'right',
                });
                
                // Negative %VP çizgisi ekle
                negativeVpSeries = indicatorChart.addLineSeries({
                    color: '#9c27b0', // Mor
                    lineWidth: 1,
                    lineStyle: 1, // Kesikli çizgi
                    title: '', // Başlığı kaldır, sol bilgi kutusunda gösterilecek
                    priceScaleId: 'right',
                });
                
                // Orta çizgi ekle (50 seviyesi)
                const middleLineSeries = indicatorChart.addLineSeries({
                    color: '#555',
                    lineWidth: 1,
                    lineStyle: 2, // Noktalı çizgi
                    priceScaleId: 'right',
                });

                // Grafikler arası etkileşim
                const indicatorInfoContainer = document.createElement('div');
                indicatorInfoContainer.className = 'indicator-info';
                indicatorInfoContainer.style.display = 'none';
                indicatorChartElement.appendChild(indicatorInfoContainer);
                
                // Fiyat ve indikatör grafiklerini birbirine bağla
                function syncCharts() {
                    // İki grafiğin zaman ölçeklerini alalım
                    const priceTimeScale = priceChart.timeScale();
                    const indicatorTimeScale = indicatorChart.timeScale();
                    
                    // Fiyat grafiği boyut değişikliğine abone ol
                    priceTimeScale.subscribeVisibleLogicalRangeChange(range => {
                        if (range) {
                            // İndikatör grafiğinin zaman ölçeğini senkronize et
                            indicatorTimeScale.setVisibleLogicalRange(range);
                        }
                    });
                    
                    // İndikatör grafiği boyut değişikliğine abone ol
                    indicatorTimeScale.subscribeVisibleLogicalRangeChange(range => {
                        if (range) {
                            // Fiyat grafiğinin zaman ölçeğini senkronize et
                            priceTimeScale.setVisibleLogicalRange(range);
                        }
                    });
                }
                
                // Crosshair hareketi için abone ol
                priceChart.subscribeCrosshairMove(param => {
                    if (param.time) {
                        // Alttaki grafikte aynı zamanda crosshair göster
                        indicatorChart.setCrosshairPosition(param.time, undefined);
                        
                        // Bilgi kutusunu güncelle
                        const date = new Date(param.time * 1000);
                        const dateStr = moment(date).format('DD.MM.YYYY HH:mm');
                        let priceStr = '';
                        
                        if (param.seriesPrices.size > 0 && candleSeries) {
                            const price = param.seriesPrices.get(candleSeries);
                            if (price && price.close) {
                                priceStr = `<div>O: ${price.open.toFixed(8)}</div>
                                           <div>H: ${price.high.toFixed(8)}</div>
                                           <div>L: ${price.low.toFixed(8)}</div>
                                           <div>C: ${price.close.toFixed(8)}</div>`;
                            }
                        }
                        
                        priceInfoContainer.style.display = 'block';
                        priceInfoContainer.innerHTML = `
                            <div>Tarih: ${dateStr}</div>
                            ${priceStr}
                        `;
                        
                        // Pozisyonu güncelle
                        if (param.point) {
                            priceInfoContainer.style.left = param.point.x + 15 + 'px';
                            priceInfoContainer.style.top = param.point.y + 15 + 'px';
                        }
                    } else {
                        priceInfoContainer.style.display = 'none';
                    }
                });
                
                // İndikatör grafikteki crosshair hareket ettikçe bilgi kutusunu güncelle
                indicatorChart.subscribeCrosshairMove(param => {
                    try {
                        if (param.time) {
                            // Üstteki grafikte aynı zamanda crosshair göster
                            priceChart.setCrosshairPosition(param.time, undefined);
                            
                            // Bilgi kutusunu güncelle
                            const date = new Date(param.time * 1000);
                            const dateStr = moment(date).format('DD.MM.YYYY HH:mm');
                            let buyValue = '';
                            let sellValue = '';
                            let positiveValue = '';
                            let negativeValue = '';
                            
                            if (param.seriesPrices) {
                                buyValue = param.seriesPrices.get(buyVpSeries);
                                sellValue = param.seriesPrices.get(sellVpSeries);
                                positiveValue = param.seriesPrices.get(positiveVpSeries);
                                negativeValue = param.seriesPrices.get(negativeVpSeries);
                            }
                            
                            // Hover bilgi kutusunu güncelle
                            indicatorInfoContainer.style.display = 'block';
                            indicatorInfoContainer.innerHTML = `
                                <div>Tarih: ${dateStr}</div>
                                <div>Buy %VP: <span style="color:#26a69a">${buyValue ? buyValue.toFixed(1) : '-'}</span></div>
                                <div>Sell %VP: <span style="color:#ef5350">${sellValue ? sellValue.toFixed(1) : '-'}</span></div>
                                <div>Positive %VP: <span style="color:#2962ff">${positiveValue ? positiveValue.toFixed(1) : '-'}</span></div>
                                <div>Negative %VP: <span style="color:#9c27b0">${negativeValue ? negativeValue.toFixed(1) : '-'}</span></div>
                            `;
                            
                            // Pozisyonu güncelle
                            if (param.point) {
                                indicatorInfoContainer.style.left = param.point.x + 15 + 'px';
                                indicatorInfoContainer.style.top = param.point.y + 15 + 'px';
                            }
                        } else {
                            indicatorInfoContainer.style.display = 'none';
                        }
                    } catch (error) {
                        console.error("Hover bilgi kutusu güncellenirken hata:", error);
                        // Sessizce hatayı geç, kullanıcı deneyimini bozmamak için
                    }
                });
                
                // Fare çıkışında bilgi kutularını gizle
                priceChartElement.addEventListener('mouseleave', () => {
                    priceInfoContainer.style.display = 'none';
                });
                
                indicatorChartElement.addEventListener('mouseleave', () => {
                    indicatorInfoContainer.style.display = 'none';
                });
                
                // Grafikleri senkronize et
                syncCharts();
                
                // Pencere boyutu değişikliğinde grafikleri yeniden boyutlandır
                function handleResize() {
                    priceChart.applyOptions({ 
                        width: priceChartElement.clientWidth,
                        height: priceChartElement.clientHeight
                    });
                    
                    indicatorChart.applyOptions({ 
                        width: indicatorChartElement.clientWidth,
                        height: indicatorChartElement.clientHeight
                    });
                }
                
                window.addEventListener('resize', handleResize);
                
                // İlk boyutlandırmayı yap
                handleResize();
            }
            
            // Verileri hazırla ve grafikleri güncelle
            function prepareAndUpdateChartData(data) {
                // Mum çubuğu verileri
                const candleData = data.timestamps.map((time, i) => ({
                    time: time / 1000, // Unix timestamp (saniye)
                    open: data.opens[i],
                    high: data.highs[i],
                    low: data.lows[i],
                    close: data.closes[i]
                }));
                
                // Long ve Short Pullback çizgileri ekleme
                const longPullbackData = [];
                const shortPullbackData = [];
                
                // Son fiyattan Long ve Short Pullback değerleri hesapla (örnek)
                const lastCandle = data.closes[data.closes.length - 1];
                const longPullbackValue = lastCandle * 0.95; // %5 altında
                const shortPullbackValue = lastCandle * 1.05; // %5 üstünde
                
                // Aynı zaman serisi için Pullback çizgileri oluştur
                data.timestamps.forEach((time) => {
                    longPullbackData.push({
                        time: time / 1000,
                        value: longPullbackValue
                    });
                    
                    shortPullbackData.push({
                        time: time / 1000,
                        value: shortPullbackValue
                    });
                });
                
                // Hacim verileri (renklendirilmiş)
                const volumeData = data.timestamps.map((time, i) => ({
                    time: time / 1000,
                    value: data.volumes[i],
                    color: data.closes[i] >= data.opens[i] ? 'rgba(38, 166, 154, 0.3)' : 'rgba(239, 83, 80, 0.3)'
                }));
                
                // İndikatör verileri
                const buyVpData = data.timestamps.map((time, i) => ({
                    time: time / 1000,
                    value: data.buyPct[i]
                }));
                
                const sellVpData = data.timestamps.map((time, i) => ({
                    time: time / 1000,
                    value: data.sellPct[i]
                }));
                
                const positiveVpData = data.timestamps.map((time, i) => ({
                    time: time / 1000,
                    value: data.positivePct[i]
                }));
                
                const negativeVpData = data.timestamps.map((time, i) => ({
                    time: time / 1000,
                    value: data.negativePct[i]
                }));
                
                // 50 seviyesi için orta çizgi
                const middleLineData = data.timestamps.map((time) => ({
                    time: time / 1000,
                    value: 50
                }));
                
                // İşaretleri hazırla (nabızlar)
                const markers = [];
                
                // Alım nabızlarını ekle
                const buyPulses = data.pulses.filter(p => p.tip === 'alim');
                buyPulses.forEach(pulse => {
                    markers.push({
                        time: pulse.zaman / 1000,
                        position: 'belowBar',
                        color: '#26a69a',
                        shape: 'arrowUp',
                        text: 'BUY'
                    });
                });
                
                // Satım nabızlarını ekle
                const sellPulses = data.pulses.filter(p => p.tip === 'satim');
                sellPulses.forEach(pulse => {
                    markers.push({
                        time: pulse.zaman / 1000,
                        position: 'aboveBar',
                        color: '#ef5350',
                        shape: 'arrowDown',
                        text: 'SELL'
                    });
                });
                
                // Güçlü alım sinyallerini ekle
                const strongBuyPulses = data.pulses.filter(p => p.tip === 'alim_guclu');
                strongBuyPulses.forEach(pulse => {
                    markers.push({
                        time: pulse.zaman / 1000,
                        position: 'belowBar',
                        color: '#00FF00', // Daha parlak yeşil
                        shape: 'arrowUp',
                        text: 'STRONG BUY'
                    });
                });
                
                // Güçlü satım sinyallerini ekle
                const strongSellPulses = data.pulses.filter(p => p.tip === 'satim_guclu');
                strongSellPulses.forEach(pulse => {
                    markers.push({
                        time: pulse.zaman / 1000,
                        position: 'aboveBar',
                        color: '#FF0000', // Daha parlak kırmızı
                        shape: 'arrowDown',
                        text: 'STRONG SELL'
                    });
                });
                
                // Pullback çizgileri için seriler oluştur (ilk kez ise)
                if (!window.longPullbackSeries) {
                    window.longPullbackSeries = priceChart.addLineSeries({
                        color: '#26a69a',  // Yeşil
                        lineWidth: 1,
                        lineStyle: 2, // Noktalı çizgi
                        priceLineVisible: false,
                        lastValueVisible: true,
                    });
                }
                
                if (!window.shortPullbackSeries) {
                    window.shortPullbackSeries = priceChart.addLineSeries({
                        color: '#ef5350',  // Kırmızı
                        lineWidth: 1,
                        lineStyle: 2, // Noktalı çizgi
                        priceLineVisible: false,
                        lastValueVisible: true,
                    });
                }
                
                // Önceki çizgileri temizle
                if (window.pullbackLines) {
                    // Önceki Long Pullback çizgilerini kaldır
                    window.pullbackLines.forEach(line => {
                        try {
                            window.longPullbackSeries.removePriceLine(line.long);
                            window.shortPullbackSeries.removePriceLine(line.short);
                        } catch (e) {
                            console.log("Çizgi kaldırılamadı:", e);
                        }
                    });
                }
                
                // Yeni çizgi dizisi oluştur
                window.pullbackLines = [];
                
                // Verileri grafiklere uygula
                candleSeries.setData(candleData);
                volumeSeries.setData(volumeData);
                buyVpSeries.setData(buyVpData);
                sellVpSeries.setData(sellVpData);
                positiveVpSeries.setData(positiveVpData);
                negativeVpSeries.setData(negativeVpData);
                window.longPullbackSeries.setData(longPullbackData);
                window.shortPullbackSeries.setData(shortPullbackData);
                
                // Pullback etiketlerini göster
                const lastCandleTime = candleData[candleData.length - 1].time;
                
                // Long Pullback etiketini ekle
                const longLine = window.longPullbackSeries.createPriceLine({
                    price: longPullbackValue,
                    color: '#26a69a',
                    lineWidth: 1,
                    lineStyle: 2,
                    axisLabelVisible: true,
                    title: 'Long Pullback',
                });
                
                // Short Pullback etiketini ekle
                const shortLine = window.shortPullbackSeries.createPriceLine({
                    price: shortPullbackValue,
                    color: '#ef5350',
                    lineWidth: 1,
                    lineStyle: 2,
                    axisLabelVisible: true,
                    title: 'Short Pullback',
                });
                
                // Yeni çizgileri kaydet
                window.pullbackLines.push({
                    long: longLine,
                    short: shortLine
                });
                
                // İşaretleri ekle
                if (markers.length > 0) {
                    candleSeries.setMarkers(markers);
                }
                
                // Görünür aralığı ayarla
                if (candleData.length > 0) {
                    let visibleBarsCount;
                    
                    // Zaman dilimine göre görünür mum sayısını ayarla
                    switch(timeframeSelect.value) {
                        case '1m':
                            visibleBarsCount = Math.min(1440, candleData.length); // 1 gün
                            break;
                        case '5m':
                            visibleBarsCount = Math.min(576, candleData.length); // 2 gün
                            break;
                        case '15m':
                            visibleBarsCount = Math.min(768, candleData.length); // 8 gün
                            break;
                        case '30m':
                            visibleBarsCount = Math.min(336, candleData.length); // 7 gün
                            break;
                        case '1h':
                            visibleBarsCount = Math.min(480, candleData.length); // 20 gün
                            break;
                        case '4h':
                            visibleBarsCount = Math.min(180, candleData.length); // 30 gün
                            break;
                        default:
                            visibleBarsCount = Math.min(100, candleData.length);
                    }
                    
                    const visibleRange = {
                        from: candleData[Math.max(0, candleData.length - visibleBarsCount)].time,
                        to: candleData[candleData.length - 1].time
                    };
                    priceChart.timeScale().setVisibleRange(visibleRange);
                }
            }

            // --- Event Listeners ---
            function handleSettingChange() {
                clearTimeout(updateTimer);
                fetchData();
            }

            changeSymbolButton.addEventListener('click', () => {
                const newSymbol = symbolInput.value.toUpperCase();
                if (newSymbol && newSymbol !== currentSymbol) {
                    currentSymbol = newSymbol;
                    updateStatus(`Sembol ${currentSymbol} olarak değiştirildi. Veri yükleniyor...`, true);
                    handleSettingChange();
                }
            });
            
            symbolInput.addEventListener('keypress', (event) => {
                 if (event.key === 'Enter') {
                    event.preventDefault();
                    changeSymbolButton.click();
                 }
             });
             
            timeframeSelect.addEventListener('change', function() {
                currentTimeframe = this.value;
                updateStatus(`Zaman dilimi ${this.options[this.selectedIndex].text} olarak ayarlandı. Veri yükleniyor...`, true);
                handleSettingChange();
            });
            
            timeRangeSelect.addEventListener('change', function() {
                currentTimeRange = parseInt(this.value);
                updateStatus(`Zaman aralığı ${this.options[this.selectedIndex].text} olarak ayarlandı. Veri yükleniyor...`, true);
                handleSettingChange();
            });
            
            twModeCheckbox.addEventListener('change', function() {
                currentTwMode = this.checked;
                updateStatus(`${this.checked ? 'TradingView Modu' : 'Normal Mod'} aktif. Veri yükleniyor...`, true);
                handleSettingChange();
            });
            
            intervalSelect.addEventListener('change', function() {
                 const intervalText = this.options[this.selectedIndex].text;
                 updateStatus(`Güncelleme sıklığı ${intervalText} olarak ayarlandı.`);
                 clearTimeout(updateTimer);
                 if (!isUpdating) {
                     scheduleNextUpdate();
                 }
             });

            // --- Başlangıç ---
            fetchData(); // Sayfa yüklendiğinde ilk veriyi çek
        });
    </script>
</body>
</html>
"""

def save_signal_to_db(symbol, timeframe, signal_data):
    """Hesaplanan sinyalleri veritabanına kaydeder."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Strong sinyaller (LONG/SHORT)
    if signal_data['buy_signal'] or signal_data['sell_signal']:
        signal_type = 'buy' if signal_data['buy_signal'] else 'sell'
        buy_pct = signal_data['buy_pct'] if signal_data['buy_signal'] else 0
        sell_pct = signal_data['sell_pct'] if signal_data['sell_signal'] else 0
        price = signal_data['last_price']
        timestamp = int(signal_data['last_timestamp'])
        bars_since = signal_data.get('bars_since', 0)
        date_added = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute('''
            INSERT INTO signals (symbol, timestamp, timeframe, signal_type, buy_pct, sell_pct, price, bars_since, date_added, is_strong)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (symbol, timestamp, timeframe, signal_type, buy_pct, sell_pct, price, bars_since, date_added, 1))

    # BINGO sinyaller
    if signal_data.get('bingo_signal'):
        timestamp = int(signal_data['last_timestamp'])
        price = signal_data['last_price']
        entry_price = signal_data['last_price']
        date_added = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        bars_since_4h = signal_data.get('bars_since_4h', 0)
        bars_since_1h = signal_data.get('bars_since_1h', 0)
        bars_since_15m = signal_data.get('bars_since_15m', 0)

        cursor.execute('''
            INSERT INTO intersections (symbol, timestamp, intersection_type, highest_timeframe, price, entry_price, bars_since_4h, bars_since_1h, bars_since_15m, date_added, is_strong)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (symbol, timestamp, 'buy', timeframe, price, entry_price, bars_since_4h, bars_since_1h, bars_since_15m, date_added, 1))

    conn.commit()
    conn.close()


if __name__ == '__main__':
    # Debug modunu geliştirme sırasında açabiliriz, canlıda kapatılmalı
    app.run(debug=True)
    # Farklı bir port kullanmak için: app.run(debug=True, port=5001)

