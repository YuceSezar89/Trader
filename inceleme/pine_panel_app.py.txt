from __future__ import annotations

import json
from urllib.request import urlopen
from urllib.parse import urlencode
from typing import List, Dict

import pandas as pd
import numpy as np
import streamlit as st
import importlib
import importlib.util

# Import, hem paket bağlamında hem de doğrudan script çalıştırmada çalışacak şekilde ayarlandı
try:
    pine_panel_equiv_mod = importlib.import_module("inceleme.pine_panel_equiv")
except ModuleNotFoundError:
    pine_panel_equiv_mod = importlib.import_module("pine_panel_equiv")

compute_all_for_symbol = pine_panel_equiv_mod.compute_all_for_symbol

BINANCE_SPOT_KLINES = "https://api.binance.com/api/v3/klines"
BINANCE_FUTURES_KLINES = "https://fapi.binance.com/fapi/v1/klines"

DEFAULT_SYMBOLS: List[str] = [
    "BTCUSDT","ETHUSDT","BNBUSDT","ADAUSDT","XRPUSDT",
    "LTCUSDT","DOTUSDT","SOLUSDT","AVAXUSDT","FARTCOINUSDT",
    "UNIUSDT","LINKUSDT","VETUSDT","XLMUSDT","NEARUSDT",
    "WIFUSDT","ZRXUSDT","ATOMUSDT","CAKEUSDT","KSMUSDT",
]

# Yardımcı formatlayıcılar (önceden tanımla — aşağıda kullanılacak)
def _fmt_rank(v) -> str:
    try:
        if v is None or (isinstance(v, float) and np.isnan(v)):
            return "-"
        return f"{int(v)}"
    except Exception:
        return "-"

def _fmt_int(v) -> str:
    try:
        if v is None or (isinstance(v, float) and np.isnan(v)):
            return "-"
        return f"{int(v)}"
    except Exception:
        return "-"

@st.cache_data(ttl=120)
def fetch_klines(symbol: str, interval: str = "15m", limit: int = 500, market: str = "futures") -> pd.DataFrame:
    base = BINANCE_FUTURES_KLINES if market == "futures" else BINANCE_SPOT_KLINES
    params = urlencode({"symbol": symbol, "interval": interval, "limit": limit})
    with urlopen(f"{base}?{params}") as resp:
        data = json.loads(resp.read().decode("utf-8"))
    cols = [
        'open_time','open','high','low','close','volume','close_time','quote_asset_volume',
        'trades','taker_buy_base','taker_buy_quote','ignore'
    ]
    df = pd.DataFrame(data, columns=cols)
    df['open'] = pd.to_numeric(df['open'], errors='coerce')
    df['high'] = pd.to_numeric(df['high'], errors='coerce')
    df['low'] = pd.to_numeric(df['low'], errors='coerce')
    df['close'] = pd.to_numeric(df['close'], errors='coerce')
    df['dt'] = pd.to_datetime(df['open_time'], unit='ms', utc=True)
    df = df.set_index('dt')
    return df


def compute_for_symbols(symbols: List[str], interval: str = "15m", market: str = "futures") -> pd.DataFrame:
    rows: List[Dict] = []
    for sym in symbols:
        try:
            k = fetch_klines(sym, interval=interval, limit=500, market=market)
            out = compute_all_for_symbol(k['close'], length_ema=200, r_period=14, rf=0.02)
            last = out.iloc[-1]
            rows.append({
                "symbol": sym,
                "time": out.index[-1],
                "price": float(out['close'].iloc[-1]),
                "ema": float(last['ema']) if pd.notna(last['ema']) else None,
                "ratio_percent": float(last['ratio_percent']) if pd.notna(last['ratio_percent']) else None,
                "mROC_long": float(last['mROC_long']) if pd.notna(last['mROC_long']) else None,
                "mROC_short": float(last['mROC_short']) if pd.notna(last['mROC_short']) else None,
                "msince_long": float(last['msince_long']) if pd.notna(last['msince_long']) else None,
                "msince_short": float(last['msince_short']) if pd.notna(last['msince_short']) else None,
                "r_score": float(last['r_score']) if pd.notna(last['r_score']) else None,
            })
        except Exception as e:
            rows.append({"symbol": sym, "error": str(e)})
    df = pd.DataFrame(rows)
    if not df.empty:
        # Trend: fiyat > EMA ise Up, değilse Down (Pine paneldeki trend eşleniği)
        if "price" in df.columns and "ema" in df.columns:
            p = df["price"]
            e = df["ema"]
            trend = np.where(pd.notna(p) & pd.notna(e) & (p > e), "Up",
                             np.where(pd.notna(p) & pd.notna(e), "Down", None))
            df["trend"] = trend
        else:
            df["trend"] = [None] * len(df)
    return df


# ---------------------------
# UI
# ---------------------------

st.set_page_config(page_title="Pine Panel 15m", layout="wide")
st.title("Pine Panel (15m) – Python Eşleniği")

with st.sidebar:
    st.markdown("### Ayarlar")
    interval = st.selectbox("Zaman Dilimi", options=["15m"], index=0, help="Şimdilik 15m sabit")
    market = st.selectbox("Piyasa", options=["futures","spot"], index=0, help="Futures: USDT perpetual")
    use_pine_order = st.checkbox("Semboller sabit (Pine sırası)", value=True)
    if use_pine_order:
        symbols = DEFAULT_SYMBOLS
        st.caption("Pine sabit listesi kullanılıyor.")
    else:
        symbols = st.multiselect("Semboller", DEFAULT_SYMBOLS, default=DEFAULT_SYMBOLS)
    sort_mode = st.selectbox("Sıralama", options=["Pine sırası","Ratio ↓","Score ↓"], index=0)
    emtia_input = st.text_input("Emtia Sembolleri (virgülle)", value="", help="Ör: XAUTUSDT,USOIL,UKOIL")
    run_btn = st.button("Hesapla / Yenile")

if run_btn or 'last_df' not in st.session_state or st.session_state.get('last_symbols') != symbols or st.session_state.get('last_interval') != interval or st.session_state.get('last_market') != market:
    with st.spinner("Veri çekiliyor ve metrikler hesaplanıyor..."):
        df = compute_for_symbols(symbols, interval=interval, market=market)
        st.session_state['last_df'] = df
        st.session_state['last_symbols'] = symbols
        st.session_state['last_interval'] = interval
        st.session_state['last_market'] = market
else:
    df = st.session_state['last_df']

if df.empty:
    st.info("Sonuç yok.")
    st.stop()

# Pine paneline benzeyen tek tablo: Emtia, Score, Ratio, L/S/T, S/S/T
st.subheader("Panel")

# Sıra (S):
# - Long için mROC_long azalan (yüksek -> 1)
# - Short için mROC_short artan (daha negatif -> 1)
df = df.copy()
# Pine sabit sıra numarası (1..N) – DEFAULT_SYMBOLS bazlı
pine_index_map = {sym: i+1 for i, sym in enumerate(DEFAULT_SYMBOLS)}
df["rank_long"] = df["mROC_long"].rank(ascending=False, method="min")
df["rank_short"] = df["mROC_short"].rank(ascending=True, method="min")
df["rank_ratio"] = df["ratio_percent"].rank(ascending=False, method="min")
df["rank_score"] = df["r_score"].rank(ascending=False, method="min")

panel_rows = []
for _, row in df.reset_index(drop=True).iterrows():
    # Emtia metni: sadece sembol (öneksiz)
    emtia_sym = f"{row['symbol']}"
    score_val = row.get("r_score")
    ratio_val = row.get("ratio_percent")
    mroc_l = row.get("mROC_long")
    mroc_s = row.get("mROC_short")
    msince_l = row.get("msince_long")
    msince_s = row.get("msince_short")
    r_ratio = row.get("rank_ratio")
    r_score = row.get("rank_score")
    _fixed_no = pine_index_map.get(row['symbol'])
    # Pine panelinde L/S/T ve S/S/T ikinci alanı: sabit Pine index (rank değil)
    lst_str = None if pd.isna(mroc_l) else f"{mroc_l:+.2f} / {_fmt_int(_fixed_no)} / {_fmt_int(msince_l)}"
    sst_str = None if pd.isna(mroc_s) else f"{mroc_s:+.2f} / {_fmt_int(_fixed_no)} / {_fmt_int(msince_s)}"
    panel_rows.append({
        "symbol": row['symbol'],
        "Emtia": emtia_sym,  # numarasız geçici
        "score_num": score_val,
        "ratio_num": ratio_val,
        "Score": ("" if pd.isna(score_val) else f"{score_val:+.2f} / {_fmt_int(_fixed_no)}"),
        "Ratio": ("" if pd.isna(ratio_val) else f"{ratio_val:+.2f} / {_fmt_int(_fixed_no)}"),
        "L/S/T": lst_str,
        "S/S/T": sst_str,
    })

panel_df = pd.DataFrame(panel_rows)

# Ana panel rank sütunlarını hesapla (Score ve Ratio için)
panel_df["rank_score"] = panel_df["score_num"].rank(ascending=False, method="min")
panel_df["rank_ratio"] = panel_df["ratio_num"].rank(ascending=False, method="min")

# Sıralama: Skor yüksekten düşüğe
panel_df = panel_df.sort_values(by=["score_num"], ascending=False, kind="mergesort").reset_index(drop=True)

# Emtia: Pine sabit sıra numarası ile etiketle (1)BTCUSDT, 2)ETHUSDT ...)
panel_df["Emtia"] = [
    f"{pine_index_map.get(sym)}){sym}" if pine_index_map.get(sym) is not None else f"{sym}"
    for sym in panel_df["symbol"].tolist()
]

# Emtia numaralandırma: Pine sabit sıra açıksa Pine index, değilse sıralama sonrası sıra numarası
def _build_emtia_label(idx: int, sym: str) -> str:
    # Ana panelde zaten 1..N verildi; bu yardımcı diğer yerler için kullanılabilir
    if use_pine_order:
        no = pine_index_map.get(sym)
        return f"{no})BINANCE:{sym}" if no is not None else f"BINANCE:{sym}"
    else:
        return f"{idx+1})BINANCE:{sym}"

# Pine sırası bilgisi korunabilir ancak ana panel numaralandırması 1..N olarak sabitlendi

def _style_panel(row: pd.Series) -> pd.Series:
    stl = {
        "Emtia": "",
        "Score": "background-color: #e0e0e0; color: #000;",
        "Ratio": "",
        "L/S/T": "",
        "S/S/T": "",
    }
    # Ratio renklendirme
    try:
        ratio_base = row.get("ratio_num")
        if pd.isna(ratio_base):
            # parse from display string if needed
            v = str(row.get("Ratio", "")).split("/")[0].strip()
            ratio_base = float(v) if v not in ("", "None") else np.nan
        if pd.notna(ratio_base) and float(ratio_base) >= 0:
            stl["Ratio"] = "background-color: #c6efce; color: #006100;"
        else:
            stl["Ratio"] = "background-color: #ffc7ce; color: #9c0006;"
    except Exception:
        pass
    # L/S/T: mROC_long işaretine göre renk (string başı '-')
    try:
        v = row["L/S/T"]
        if isinstance(v, str) and v.startswith("-"):
            stl["L/S/T"] = "background-color: #ffc7ce; color: #9c0006;"
        elif isinstance(v, str):
            stl["L/S/T"] = "background-color: #c6efce; color: #006100;"
    except Exception:
        pass
    # S/S/T: short tarafı negatif ise kırmızı (güçlü short), pozitifse yeşil
    try:
        v = row["S/S/T"]
        if isinstance(v, str) and v.startswith("-"):
            stl["S/S/T"] = "background-color: #ffc7ce; color: #9c0006;"
        elif isinstance(v, str):
            stl["S/S/T"] = "background-color: #c6efce; color: #006100;"
    except Exception:
        pass
    return pd.Series(stl)

_visible_cols = ["Emtia", "Score", "Ratio", "L/S/T", "S/S/T"]
panel_display = panel_df[_visible_cols].copy()
# Satır numaralarını 1'den başlat
panel_display.index = panel_display.index + 1
styled = panel_display.style.apply(_style_panel, axis=1)
st.dataframe(styled, height=720, use_container_width=True)

# Eski ayrı L/S/T ve S/S/T blokları yerine tek panel tablo gösterildi.

# Emtia bölümü (kullanıcı girdisine göre)
if emtia_input.strip():
    emtia_syms = [s.strip().upper() for s in emtia_input.split(',') if s.strip()]
    st.subheader("Emtia")
    with st.spinner("Emtia verileri çekiliyor..."):
        emtia_df = compute_for_symbols(emtia_syms, interval=interval, market=market)
    if not emtia_df.empty:
        # Emtia için görünüm – DEFAULT_SYMBOLS sırasına göre sabit sıra
        emtia_rows = []
        # Emtia paneli için de sıralamalar (long/short + ratio/score)
        emtia_df = emtia_df.copy()
        emtia_df["rank_long"] = emtia_df["mROC_long"].rank(ascending=False, method="min")
        emtia_df["rank_short"] = emtia_df["mROC_short"].rank(ascending=True, method="min")
        emtia_df["rank_ratio"] = emtia_df["ratio_percent"].rank(ascending=False, method="min")
        emtia_df["rank_score"] = emtia_df["r_score"].rank(ascending=False, method="min")
        # DEFAULT_SYMBOLS sıralamasına göre sıralayalım (Pine sabit sıra)
        order_map = {sym: i for i, sym in enumerate(DEFAULT_SYMBOLS)}
        emtia_df = emtia_df.sort_values(
            by=["symbol"],
            key=lambda s: s.map(lambda x: order_map.get(x, 10_000)),
            kind="mergesort"
        ).reset_index(drop=True)
        for r in emtia_df.to_dict("records"):
            fixed_no = pine_index_map.get(r['symbol'])
            emtia_name = f"{_fmt_int(fixed_no)}){r['symbol']}"  # BINANCE: kaldırıldı
            # Pine panelinde ikinci alan: sabit Pine index
            lst_str = None if pd.isna(r.get('mROC_long')) else f"{r.get('mROC_long'):+.2f} / {_fmt_int(fixed_no)} / {_fmt_int(r.get('msince_long'))}"
            sst_str = None if pd.isna(r.get('mROC_short')) else f"{r.get('mROC_short'):+.2f} / {_fmt_int(fixed_no)} / {_fmt_int(r.get('msince_short'))}"
            _fixed_no_e = pine_index_map.get(r['symbol'])
            emtia_rows.append({
                "Emtia": emtia_name,
                "score_num": r.get("r_score"),
                "ratio_num": r.get("ratio_percent"),
                "Score": ("" if pd.isna(r.get('r_score')) else f"{r.get('r_score'):+.2f} / {_fmt_int(_fixed_no_e)}"),
                "Ratio": ("" if pd.isna(r.get('ratio_percent')) else f"{r.get('ratio_percent'):+.2f} / {_fmt_int(_fixed_no_e)}"),
                "L/S/T": lst_str,
                "S/S/T": sst_str,
            })
        emtia_panel = pd.DataFrame(emtia_rows)
        # Emtia panelinde DEFAULT_SYMBOLS sırası korunur; tekrar sıralama yapılmaz
        _visible_cols_e = ["Emtia", "Score", "Ratio", "L/S/T", "S/S/T"]
        emtia_display = emtia_panel[_visible_cols_e].copy()
        # Satır numaralarını 1'den başlat
        emtia_display.index = emtia_display.index + 1
        emtia_styled = emtia_display.style.apply(_style_panel, axis=1)
        st.dataframe(emtia_styled, height=520, use_container_width=True)

# Detay grafikler
st.subheader("Detay Grafik")
col1, col2 = st.columns([1,1])
with col1:
    sym_sel = st.selectbox("Grafik – Sembol", options=df['symbol'].tolist())
    if sym_sel:
        k = fetch_klines(sym_sel, interval=interval, limit=500, market=market)
        out = compute_all_for_symbol(k['close'], length_ema=200, r_period=14, rf=0.02)
        price_ema = pd.DataFrame({
            'price': out['close'],
            'ema200': out['ema']
        })
        st.line_chart(price_ema, height=320)
with col2:
    if sym_sel:
        ratio_df = pd.DataFrame({'ratio_percent': out['ratio_percent']}).dropna()
        st.area_chart(ratio_df, height=320)

st.caption(f"Kaynak: Binance {'Futures' if market=='futures' else 'Spot'} 15m klines. Hesaplamalar Pine v5 ile birebir uyum için eşlenmiştir.")

# Debug – Seçili sembol metrikleri (TV ile birebir kıyas için)
if 'sym_sel' in locals() and sym_sel:
    try:
        last_row = out.iloc[-1]
        fixed_no_dbg = pine_index_map.get(sym_sel)
        score_dbg = last_row.get('r_score')
        ratio_dbg = last_row.get('ratio_percent')
        mroc_l_dbg = last_row.get('mROC_long')
        mroc_s_dbg = last_row.get('mROC_short')
        msince_l_dbg = last_row.get('msince_long')
        msince_s_dbg = last_row.get('msince_short')
        score_text = "" if pd.isna(score_dbg) else f"{float(score_dbg):+.2f} / {_fmt_int(fixed_no_dbg)}"
        ratio_text = "" if pd.isna(ratio_dbg) else f"{float(ratio_dbg):+.2f} / {_fmt_int(fixed_no_dbg)}"
        lst_text = None if pd.isna(mroc_l_dbg) else f"{float(mroc_l_dbg):+.2f} / {_fmt_int(fixed_no_dbg)} / {_fmt_int(msince_l_dbg)}"
        sst_text = None if pd.isna(mroc_s_dbg) else f"{float(mroc_s_dbg):+.2f} / {_fmt_int(fixed_no_dbg)} / {_fmt_int(msince_s_dbg)}"
        st.markdown("### Debug – Seçili sembol metrikleri")
        st.write({
            'Symbol': sym_sel,
            'Score': score_text,
            'Ratio': ratio_text,
            'L/S/T': lst_text,
            'S/S/T': sst_text,
        })
    except Exception as _:
        pass
